{"version":3,"sources":["store/packageList/actions.ts","store/packageList/types.ts","components/Home.tsx","components/Deltails.tsx","routes/Routes.tsx","App.tsx","serviceWorker.ts","store/packageList/reducer.ts","store/index.ts","index.tsx"],"names":["fetchPackageRowsSuccess","packages","type","parseKey","keyWord","s","p1","indexOf","rs","length","p2","substring","parsePackage","packageName","descript","id","description","dependencies","split","forEach","element","p","trimStart","s2","includes","push","parseDependencies","fetchPackageRows","dispatch","a","fetch","res","list","ok","String","text","r","Home","history","useHistory","useState","setPackages","useDispatch","data","useSelector","state","useEffect","sortPac","value1","value2","sort","tableHeader","Table","Header","Row","HeaderCell","tableRows","map","packageRow","key","onClick","rowClicked","Cell","className","as","celled","selectable","Body","Details","useParams","setPackageRow","dependents","setDependents","prow","filter","pac","row","filterPacka","deps","find","pacid","id2","idsEq","filterDeps","detailRows","dependencyRows","index","depsCaption","depsRows","Label","size","Icon","name","goBack","Routes","path","exact","component","mapDispatchToProps","connect","props","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29995348.chunk.js","sourcesContent":["import { ThunkAction } from \"redux-thunk\";\nimport { AnyAction, Dispatch } from \"redux\";\nimport { FETCH_PACKAGES, PackageRow } from \"./types\";\nimport { AppActions, AppState } from \"..\";\n\nexport const fetchPackageRowsSuccess = (\n    packages: PackageRow[]\n): AppActions => ({\n    type: FETCH_PACKAGES,\n    packages,\n});\n\nfunction parseDependencies(s:string|null): string[] {\n    let rs:string[] = [];\n    if (s) {\n        let sa:string[] = s.split(',');\n        sa.forEach(element => {\n            element = element.trimStart();\n            let p:number = element.indexOf(\" \");\n            let s2:string = p > -1 ? element.substring(0, p) : element;\n            if (!rs.includes(s2)){\n                rs.push(s2);\n            }\n        });\n    }\n    return rs;\n}\n\nfunction parseKey(keyWord:string,s:string): string|null {\n    let p1:number = s.indexOf(keyWord);\n    let rs:string|null = null;\n    if (p1 > -1) {\n        p1 += keyWord.length;\n        let p2:number = s.indexOf(\"\\n\", p1);\n        rs = p2 > -1 ? s.substring(p1, p2) : s.substring(p1);\n    }\n    return rs;\n}\n\nfunction parsePackage(s:string): PackageRow {\n    let p2:number = s.indexOf(\"\\n\");\n    let packageName:string = s.substring(0,p2);\n    s = s.substring(p2 + 1);\n\n    let descript:string|null = parseKey(\"Description: \", s);\n    if (descript===null) descript = \"\";\n\n    let depends:string|null = parseKey(\"Depends: \", s);\n    let depends2:string[] = parseDependencies(depends);\n\n    return {id: packageName, description: descript, dependencies: depends2};\n}\n\nexport const fetchPackageRows = (): ThunkAction<void, AppState,{}, AnyAction> => {\n\n    return async (dispatch: Dispatch<AppActions>) => {\n        const res = await fetch(\"./status.real.txt\");\n        \n        let list: PackageRow[] = [];\n        if (!res.ok) {\n            // todo: failure\n            return dispatch(fetchPackageRowsSuccess(list));  \n        }\n        const text:string = String(await res.text());\n\n        /*\n          Could have utilised text.split(magicWord) here, but the substring approach used\n          here may require less memory\n          */\n        const magicWord:string = \"Package: \";\n        let p1:number = text.indexOf(magicWord);\n\n        while(p1 > -1) {\n            p1 += magicWord.length;\n            let p2:number = text.indexOf(magicWord, p1);\n            let s: string = p2 > 0 ? text.substring(p1, p2) : text.substring(p1);\n            let r: PackageRow = parsePackage(s);\n            list.push(r);\n            p1 = p2;\n        }\n        return dispatch(fetchPackageRowsSuccess(list));\n    };\n};","export interface PackageRow {\n    id: string;\n    description: string;\n    dependencies: string[];\n}\n\nexport const FETCH_PACKAGES = \"FETCH_PACKAGES\";\n\nexport interface FetchPackagesAction {\n    type: typeof FETCH_PACKAGES;\n    packages: PackageRow[];\n}\n\nexport type PackageListActionTypes = FetchPackagesAction;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { fetchPackageRows } from \"../store/packageList/actions\";\nimport { PackageRow } from \"../store/packageList/types\";\nimport {useHistory} from \"react-router-dom\";\nimport { Header, Input, Table } from \"semantic-ui-react\";\n\nconst Home = () => {\n    const history = useHistory();\n    const [packages, setPackages] = useState<PackageRow[]>([]);\n    const dispatch = useDispatch();\n    const data = useSelector((state:AppState) => state.packages);\n    useEffect(() => {\n        dispatch(fetchPackageRows());\n    }, []);\n    const sortPac = (value1:PackageRow, value2:PackageRow) => {\n        return value1.id > value2.id ? 1 : value1.id < value2.id ? -1 : 0;\n    }\n    useEffect(() => {\n        setPackages(data.sort(sortPac));\n    }, [data]);\n\n    const rowClicked = (packageRow: PackageRow) => {\n        history.push(\"/details/\" + packageRow.id);\n    }\n\n    const tableHeader = () => {\n        return (\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Package</Table.HeaderCell>\n                    <Table.HeaderCell>Description</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n        )\n    }\n    const tableRows = packages.map(packageRow => (\n        <Table.Row \n            key={packageRow.id}\n            onClick={() => rowClicked(packageRow)}\n        >\n            <Table.Cell>{packageRow.id}</Table.Cell>\n            <Table.Cell>{packageRow.description}</Table.Cell>\n        </Table.Row>\n    ))\n    return (\n        <div className=\"content\">\n            <Header as=\"h1\" className=\"page-title\">Packages</Header>\n            <Table celled selectable>\n                {tableHeader}\n                <Table.Body>{tableRows}</Table.Body>\n            </Table>\n        </div>\n    )\n};\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { PackageRow } from \"../store/packageList/types\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Header, Table, Label, Icon } from \"semantic-ui-react\";\n\nconst Details = () => {\n    const history = useHistory();\n\n    const { id } = useParams();\n    const data = useSelector((state: AppState) => state.packages);\n\n    // no dispatch(fetchPackageRows()), Home component already did that.\n    const [packageRow, setPackageRow] = useState<PackageRow>();\n    const [dependents, setDependents] = useState<PackageRow[]>([]);\n\n    const filterPacka = (row: PackageRow, id: string) => {\n        return row.id === id;\n    };\n    const idsEq = (id:string, id2:string) => {\n        return id === id2;\n    };\n    const filterDeps = (row: PackageRow, id: string) => {\n        let found = row.dependencies.find(pacid => idsEq(pacid,id));\n        return found;\n    };\n    useEffect(() => {\n        let prow: PackageRow[] = data.filter(pac => filterPacka(pac, id));\n        let deps: PackageRow[] = data.filter(pac => filterDeps(pac, id));\n        setPackageRow(prow[0]);\n        setDependents(deps);\n    }, [data,id]);\n\n    const rowClicked = (id: string) => {\n        history.push(\"/details/\" + id);\n    }\n\n    const detailRows = (\n        <Table.Row>\n            <Table.Cell>Description</Table.Cell>\n            <Table.Cell>{packageRow?.description}</Table.Cell>\n        </Table.Row>\n    );\n    const dependencyRows = packageRow?.dependencies.map((id, index) => (\n        <Table.Row onClick={() => rowClicked(id)}>\n            <Table.Cell>{index === 0 && \"Dependencies\"}</Table.Cell>\n            <Table.Cell>{id}</Table.Cell>\n        </Table.Row>\n    ));\n    const depsCaption:string = \"Depend on \" + id;\n    const depsRows = dependents?.map((row, index) => (\n        <Table.Row onClick={() => rowClicked(row.id)}>\n            <Table.Cell>{index === 0 && depsCaption}</Table.Cell>\n            <Table.Cell>{row.id}</Table.Cell>\n        </Table.Row>\n    ));\n\n    return (\n        <div className=\"content\">\n            <Header as=\"h1\">\n                <Label as='a' size='large'\n                    onClick={() => history.push(\"/\")}>\n                    <Icon name='home' size='large' /> Home\n                </Label>\n                <Label as='a' size='large'\n                    onClick={() => history.goBack()}>\n                    <Icon name='arrow up' size='large' /> Back\n                </Label>\n                Package: {id}\n            </Header>\n            <Table celled selectable>\n                <Table.Body>\n                    {detailRows}\n                    {dependencyRows}\n                    {depsRows}\n                </Table.Body>\n            </Table>\n        </div>\n    )\n}\n\nexport default Details;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"../components/Home\";\nimport Details from \"../components/Deltails\";\n\nconst Routes = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/details/:id\">\n                    <Details />\n                </Route>\n            </Switch>\n        </Router>\n    )\n};\n\nexport default Routes;\n","import React from 'react';\nimport Routes from \"./routes/Routes\";\nimport './App.css';\nimport { connect } from \"react-redux\";\nimport { fetchPackageRows } from \"./store/packageList/actions\";\nimport { FunctionComponent } from 'react';\n\nconst App: FunctionComponent<any> = props => {\n\n  return <Routes />;\n};\n\nconst mapDispatchToProps = {\n  fetchPackageRows\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { PackageRow, FETCH_PACKAGES, PackageListActionTypes } from \"./types\";\n\nconst initialState: PackageRow[] = [];\n\nexport const packageListReducer = (\n    state = initialState, \n    action: PackageListActionTypes\n  ): PackageRow[] => {\n      switch(action.type) {\n        case FETCH_PACKAGES:\n              return [...action.packages]\n        default:\n            return state;\n      }\n  }","import { createStore, combineReducers, applyMiddleware } from \"redux\";\n//import { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\n\nimport { packageListReducer} from \"./packageList/reducer\";\nimport { PackageListActionTypes } from \"./packageList/types\";\n\nconst rootReducer = combineReducers({\n    packages: packageListReducer\n});\n\nexport const store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport type AppActions = \n    | PackageListActionTypes;\n    ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}